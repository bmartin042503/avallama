name: Build and Release Avallama

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-windows:
    name: Windows Installer (.exe)
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Restore & Publish
        run: dotnet publish avallama/avallama.csproj -c Release -r win-x64 --self-contained true -o win-dist /p:PublishSingleFile=true

      - name: Install Inno Setup
        run: |
          Invoke-WebRequest https://jrsoftware.org/download.php/is.exe -OutFile is.exe
          Start-Process -FilePath .\is.exe -ArgumentList '/VERYSILENT', '/SUPPRESSMSGBOXES' -Wait
          echo "C:\Program Files (x86)\Inno Setup 6" >> $env:GITHUB_PATH

      - name: Build Installer
        run: |
          $VERSION = "${{ github.ref_name }}"
          $VERSION = $VERSION.Substring(1)
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" `
            /DAppVersion="${VERSION}" `
            scripts\installer.iss

      - name: Upload .exe Artifact
        uses: actions/upload-artifact@v4
        with:
          name: AvallamaSetup.exe
          path: scripts\AvallamaSetup.exe

  build-linux:
    name: Debian Package (.deb)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Set version var
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Run Debian packaging script
        run: |
          chmod +x scripts/package-debian.sh
          ./scripts/package-debian.sh "${{ env.VERSION }}"

      - name: Upload Debian Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            avallama_${{ env.VERSION }}_amd64.deb
  
  build-macos:
    name: macOS Packages (.zip for x64 and arm64)
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Set version var
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Run macOS packaging script
        run: |
          chmod +x scripts/package-macos.sh
          ./scripts/package-macos.sh "${{ env.VERSION }}"
      
      
      - name: Upload macOS x64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-x64-package
          path: avallama_${{ env.VERSION }}_osx_x64.zip

      - name: Upload macOS arm64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-package
          path: avallama_${{ env.VERSION }}_osx_arm64.zip

  release:
    name: Publish GitHub Release
    needs: [ build-windows, build-linux, build-macos ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get tag message
        id: tag_message
        run: |
          git fetch --tags --force
          TAG_NAME=${GITHUB_REF#refs/tags/}
          TAG_MESSAGE=$(git for-each-ref refs/tags/$TAG_NAME --format='%(contents)')
          echo "tag_message<<EOF" >> $GITHUB_OUTPUT
          echo "$TAG_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Flatten artifact directory
        run: |
          mkdir release-assets
          find artifacts -type f -exec cp {} release-assets/ \;

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: ${{ steps.tag_message.outputs.tag_message }}
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
