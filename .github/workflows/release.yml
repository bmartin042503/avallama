name: Build and Release Avallama

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.x'

jobs:
  build-windows:
    name: Windows Installer (.exe)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore & Publish
        run: |
          dotnet publish avallama/avallama.csproj \
            -c Release -r win-x64 --self-contained true \
            -o win-dist \
            /p:PublishSingleFile=true

      - name: Install Inno Setup
        run: |
          Invoke-WebRequest https://jrsoftware.org/download.php/is.exe -OutFile is.exe
          Start-Process .\is.exe -ArgumentList '/VERYSILENT','/SUPPRESSMSGBOXES' -Wait
          echo "C:\Program Files (x86)\Inno Setup 6" >> $env:GITHUB_PATH

      - name: Build Installer
        working-directory: win-dist
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" \
            /DAppVersion="${{ env.VERSION }}" \
            ../scripts/installer.iss

      - name: Verify installer
        run: dir win-dist

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-Installer
          path: win-dist/AvallamaSetup.exe

  build-linux:
    name: Linux Packages (.deb, .tar.gz, PKGBUILD)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish (linux-x64)
        run: |
          dotnet publish avallama/avallama.csproj \
            -c Release -r linux-x64 --self-contained true \
            -o linux-dist \
            /p:PublishSingleFile=true

      - name: Create .deb
        run: |
          mkdir -p deb-root/usr/local/bin deb-root/DEBIAN
          cp linux-dist/avallama deb-root/usr/local/bin/avallama
          cat > deb-root/DEBIAN/control <<EOF
          Package: avallama
          Version: ${{ env.VERSION }}
          Architecture: amd64
          Maintainer: 4foureyes
          Description: Cross-platform GUI for interacting with LLMs via Ollama
          EOF
          dpkg-deb --build deb-root avallama_${{ env.VERSION }}_amd64.deb

      - name: Create .tar.gz (Arch-style)
        run: tar czvf avallama_${{ env.VERSION }}_arch_x64.tar.gz -C linux-dist .

      - name: List artifacts
        run: ls -l

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Linux-Packages
          path: |
            avallama_${{ env.VERSION }}_amd64.deb
            avallama_${{ env.VERSION }}_arch_x64.tar.gz
            PKGBUILD

  build-macos:
    name: macOS Packages (.zip for x64 and arm64)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish for osx-x64
        run: |
          dotnet publish avallama/avallama.csproj \
            -c Release -r osx-x64 --self-contained true \
            -o mac-dist-x64 \
            /p:PublishSingleFile=true

      - name: Publish for osx-arm64
        run: |
          dotnet publish avallama/avallama.csproj \
            -c Release -r osx-arm64 --self-contained true \
            -o mac-dist-arm64 \
            /p:PublishSingleFile=true

      - name: Zip osx-x64
        run: zip -r avallama_${{ env.VERSION }}_osx_x64.zip mac-dist-x64/*

      - name: Zip osx-arm64
        run: zip -r avallama_${{ env.VERSION }}_osx_arm64.zip mac-dist-arm64/*

      - name: Upload macOS x64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-x64-package
          path: avallama_${{ env.VERSION }}_osx_x64.zip

      - name: Upload macOS arm64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-package
          path: avallama_${{ env.VERSION }}_osx_arm64.zip

  release:
    name: Publish GitHub Release
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get tag message
        id: tag_message
        run: |
          git fetch --tags --force
          TAG_NAME=${GITHUB_REF#refs/tags/}
          TAG_MESSAGE=$(git show $TAG_NAME -s --format=%B)
          echo "tag_message<<EOF" >> $GITHUB_OUTPUT
          echo "$TAG_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Flatten artifact directory
        run: |
          mkdir release-assets
          find artifacts -type f -exec cp -- "{}" release-assets/ \;

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: ${{ steps.tag_message.outputs.tag_message }}
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
